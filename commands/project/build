#!/usr/bin/env bash

cd "$FORNIX_FOLDER"
# make sure tauri is installed (pinned to tauri v1.0.0-rc.5, 2022-2-16)
cargo install --git https://github.com/tauri-apps/tauri/ --rev 5a4e9efa0ad66edffdc27e7c7b89e4c120f4ba98 tauri-cli
# add tauri to path
export PATH="$FORNIX_HOME/.cargo/bin/:$PATH"
yarn install
yarn generate-icons

# frontend
cd "$FORNIX_FOLDER/packages/src-renderer"
yarn run vite build

# backend
cd "$FORNIX_FOLDER/packages"
"$FORNIX_HOME/.cargo/bin/cargo-tauri" -- build "$@"

if [ "$OSTYPE" = "linux-gnu" ] 
then
    set -euxo pipefail
    
    cd "$FORNIX_FOLDER/target.ignore/release/bundle/appimage"

    # FIXME: extreme hack because I can't figure out how to make gtk respect XDG_DATA_DIRS
    the_thing_that_should_have_schemas="/nix/store/24lgqdbdzy31k0i2dh6s51g2ayy6cpyl-glib-2.68.2/share/glib-2.0"
    the_thing_that_does_have_schemas="/nix/store/yb0n3ff69rrxa4dd0dqc37zl93fwkzwh-gsettings-desktop-schemas-40.0/share/gsettings-schemas/gsettings-desktop-schemas-40.0/glib-2.0/"
    temp_folder="/tmp/glib-2.0/"
    sudo rm -rf "$temp_folder"
    cp -r "$the_thing_that_does_have_schemas/" "$temp_folder/"
    # this loop is so stupidly complicated because of many inherent-to-shell reasons, for example: https://stackoverflow.com/questions/13726764/while-loop-subshell-dilemma-in-bash
    for_each_item_in="$temp_folder"; [ -z "$__NESTED_WHILE_COUNTER" ] && __NESTED_WHILE_COUNTER=0;__NESTED_WHILE_COUNTER="$((__NESTED_WHILE_COUNTER + 1))"; trap 'rm -rf "$__temp_var__temp_folder"' EXIT; __temp_var__temp_folder="$(mktemp -d)"; mkfifo "$__temp_var__temp_folder/pipe_for_while_$__NESTED_WHILE_COUNTER"; (find "$for_each_item_in" ! -path "$for_each_item_in" -print0 2>/dev/null | sort -z > "$__temp_var__temp_folder/pipe_for_while_$__NESTED_WHILE_COUNTER" &); while read -d $'\0' each
    do
        chmod u=rwx,g=rwx,o=rwx "$each"
    done < "$__temp_var__temp_folder/pipe_for_while_$__NESTED_WHILE_COUNTER";__NESTED_WHILE_COUNTER="$((__NESTED_WHILE_COUNTER - 1))"
    sudo ln -sf "$temp_folder" "$the_thing_that_should_have_schemas"
    # tauri-app-template.AppDir//nix/store/24lgqdbdzy31k0i2dh6s51g2ayy6cpyl-glib-2.68.2/share/glib-2.0/schemas/gschemas.compiled.U8VPH1
    
    export ARCH=x86_64

    mkdir -p "tauri-app-template.AppDir"
    cp -r ../appimage_deb/data/usr "tauri-app-template.AppDir"

    cd "tauri-app-template.AppDir"

    wget --no-check-certificate -4 -O AppRun https://github.com/AppImage/AppImageKit/releases/download/continuous/AppRun-x86_64 || wget --no-check-certificate -4 -O AppRun https://github.com/AppImage/AppImageKit/releases/download/12/AppRun-aarch64
    chmod +x AppRun

    cp "usr/share/icons/hicolor/512x512@2x/apps/tauri-app-template.png" .DirIcon
    ln -s "usr/share/icons/hicolor/512x512@2x/apps/tauri-app-template.png" "tauri-app-template.png"

    ln -s "usr/share/applications/tauri-app-template.desktop" "tauri-app-template.desktop"

    cd ..

    wget --no-check-certificate -4 -O linuxdeploy-plugin-gtk.sh "https://raw.githubusercontent.com/linuxdeploy/linuxdeploy-plugin-gtk/master/linuxdeploy-plugin-gtk.sh"
    wget --no-check-certificate -4 -O linuxdeploy-x86_64.AppImage https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage

    chmod +x linuxdeploy-plugin-gtk.sh
    chmod +x linuxdeploy-x86_64.AppImage

    OUTPUT="tauri-app-template_0.1.0_amd64.AppImage" ./linuxdeploy-x86_64.AppImage --appdir "tauri-app-template.AppDir" --plugin gtk --output appimage
fi